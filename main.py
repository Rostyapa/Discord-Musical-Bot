import discord
from discord import app_commands, ui
import yt_dlp
import asyncio
import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from collections import deque
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç yt-dlp
yt_dlp.utils.std_headers['User-Agent'] = 'Mozilla/5.0'
yt_dlp.utils.std_headers['Accept-Language'] = 'en-US,en;q=0.9'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω Discord
token = os.getenv('DISCORD_TOKEN')
if not token:
    raise ValueError("DISCORD_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Spotify
spotify_client_id = os.getenv('SPOTIFY_CLIENT_ID')
spotify_client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
if not spotify_client_id or not spotify_client_secret:
    raise ValueError("SPOTIFY_CLIENT_ID –∏–ª–∏ SPOTIFY_CLIENT_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã!")
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º intents
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp –∏ FFmpeg
YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'noplaylist': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'ytsearch',
    'extract_flat': True,
}
YDL_OPTIONS_FULL = {
    'format': 'bestaudio/best',
    'noplaylist': False,
    'quiet': True,
    'no_warnings': True,
}
YDL_OPTIONS_SOUNDCLOUD = {
    'format': 'bestaudio/best',
    'noplaylist': False,
    'quiet': True,
    'no_warnings': True,
    'extract_flat': True,
    'cookiefile': 'soundcloud_cookies.txt',  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å cookies
}
YDL_OPTIONS_SOUNDCLOUD_FULL = {
    'format': 'bestaudio/best',
    'noplaylist': False,
    'quiet': True,
    'no_warnings': True,
    'cookiefile': 'soundcloud_cookies.txt',
}
FFMPEG_OPTIONS = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ FFmpeg (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å)
FFMPEG_PATH = "M:/ffmpeg-master-latest-win64-gpl-shared/bin/ffmpeg.exe"  # –î–ª—è Windows
# FFMPEG_PATH = "/usr/bin/ffmpeg"  # –î–ª—è Linux
# FFMPEG_PATH = "/usr/local/bin/ffmpeg"  # –î–ª—è macOS

# –û—á–µ—Ä–µ–¥—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
queues = {}
last_button_press = {}
current_track = {}
added_by = {}
current_track_url = {}
control_messages = {}
update_tasks = {}

@client.event
async def on_ready():
    await tree.sync()
    logging.info(f'–ë–æ—Ç {client.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω! –ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.')

async def get_youtube_url(query):
    loop = asyncio.get_event_loop()
    with yt_dlp.YoutubeDL(YDL_OPTIONS_FULL) as ydl:
        try:
            result = await loop.run_in_executor(None, lambda: ydl.extract_info(query, download=False))
            if 'entries' in result and result['entries']:
                return result['entries'][0]['url'], result['entries'][0]['title']
            elif 'url' in result:
                return result['url'], result['title']
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {e}")
    return None, None

async def get_youtube_playlist_urls(playlist_url):
    loop = asyncio.get_event_loop()
    with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
        try:
            result = await loop.run_in_executor(None, lambda: ydl.extract_info(playlist_url, download=False))
            if 'entries' in result:
                return [(entry['url'], entry.get('title', 'Unknown Title')) for entry in result['entries']]
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube: {e}")
            return []

async def get_soundcloud_url(url):
    loop = asyncio.get_event_loop()
    with yt_dlp.YoutubeDL(YDL_OPTIONS_SOUNDCLOUD_FULL) as ydl:
        try:
            result = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=False))
            if 'entries' in result and result['entries']:
                return result['entries'][0]['url'], result['entries'][0]['title']
            elif 'url' in result:
                return result['url'], result['title']
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SoundCloud: {e}")
    return None, None

async def get_soundcloud_playlist_urls(playlist_url):
    loop = asyncio.get_event_loop()
    with yt_dlp.YoutubeDL(YDL_OPTIONS_SOUNDCLOUD) as ydl:
        try:
            result = await loop.run_in_executor(None, lambda: ydl.extract_info(playlist_url, download=False))
            if 'entries' in result:
                return [(entry['url'], entry.get('title', 'Unknown Title')) for entry in result['entries']]
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ SoundCloud: {e}")
            return []

def get_spotify_track_info(track_url):
    track = sp.track(track_url)
    return f"{track['artists'][0]['name']} - {track['name']}"

def get_spotify_playlist_tracks(playlist_url):
    playlist = sp.playlist_tracks(playlist_url)
    return [f"{item['track']['artists'][0]['name']} - {item['track']['name']}" for item in playlist['items']]

async def update_control_message(guild_id, user_avatar):
    while guild_id in control_messages:
        if guild_id not in control_messages:
            return
        message = control_messages.get(guild_id)
        if not message:
            return
        embed = discord.Embed(title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π", description=f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{current_track.get(guild_id, '–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')}**", color=discord.Color.blue())
        embed.set_thumbnail(url=user_avatar)
        embed.set_footer(text=f"–í –æ—á–µ—Ä–µ–¥–∏: {len(queues.get(guild_id, deque()))} —Ç—Ä–µ–∫–æ–≤ | –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_by.get(guild_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        try:
            await message.edit(embed=embed)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break
        await asyncio.sleep(30)

async def play_next(interaction: discord.Interaction):
    vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
    if not vc or not queues.get(interaction.guild.id):
        return

    queue = queues[interaction.guild.id]
    if queue and not vc.is_playing():
        audio_url, title = queue.popleft()
        current_track[interaction.guild.id] = title
        current_track_url[interaction.guild.id] = audio_url
        try:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º FFmpegPCMAudio –≤ PCMVolumeTransformer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
            source = discord.FFmpegPCMAudio(audio_url, executable=FFMPEG_PATH, **FFMPEG_OPTIONS)
            source = discord.PCMVolumeTransformer(source, volume=1.0)  # –ù–∞—á–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å 100%
            vc.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(interaction), client.loop))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            await interaction.followup.send(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    elif not queue:
        await interaction.followup.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")

async def process_playlist(interaction: discord.Interaction, tracks, is_spotify=True, is_soundcloud=False):
    queue = queues[interaction.guild.id]
    for track in tracks:
        if is_spotify:
            audio_url, title = await get_youtube_url(track)
        elif is_soundcloud:
            audio_url, title = await get_soundcloud_url(track[0])
        else:
            audio_url, title = await get_youtube_url(track[0])
        if audio_url:
            queue.append((audio_url, title))
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {title}")

@app_commands.command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ URL (Spotify, YouTube, YouTube Music, SoundCloud)")
async def play(interaction: discord.Interaction, url: str):
    await interaction.response.defer()

    if not interaction.user.voice:
        await interaction.followup.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    voice_channel = interaction.user.voice.channel
    try:
        vc = await voice_channel.connect()
        logging.info(f"–ü–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {voice_channel.name}")
    except discord.ClientException:
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)

    if interaction.guild.id not in queues:
        queues[interaction.guild.id] = deque()

    added_by[interaction.guild.id] = interaction.user.name

    try:
        if 'spotify.com/track' in url:
            track_query = get_spotify_track_info(url)
            audio_url, title = await get_youtube_url(track_query)
            if not audio_url:
                await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
                return
            queues[interaction.guild.id].append((audio_url, title))
            current_track[interaction.guild.id] = title
            current_track_url[interaction.guild.id] = audio_url

        elif 'spotify.com/playlist' in url:
            tracks = get_spotify_playlist_tracks(url)
            await interaction.followup.send(f"–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç Spotify —Å {len(tracks)} —Ç—Ä–µ–∫–∞–º–∏. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            audio_url, title = await get_youtube_url(tracks[0])
            if audio_url:
                queues[interaction.guild.id].append((audio_url, title))
                current_track[interaction.guild.id] = title
                current_track_url[interaction.guild.id] = audio_url
                asyncio.create_task(process_playlist(interaction, tracks[1:], is_spotify=True))
            else:
                await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
                return

        elif 'youtube.com/playlist' in url or 'music.youtube.com/playlist' in url:
            tracks = await get_youtube_playlist_urls(url)
            if not tracks:
                await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç YouTube.")
                return
            audio_url, title = await get_youtube_url(tracks[0][0])
            if not audio_url:
                await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube.")
                return
            queues[interaction.guild.id].append((audio_url, title))
            current_track[interaction.guild.id] = title
            current_track_url[interaction.guild.id] = audio_url
            await interaction.followup.send(f"–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç YouTube —Å {len(tracks)} —Ç—Ä–µ–∫–∞–º–∏. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            if len(tracks) > 1:
                asyncio.create_task(process_playlist(interaction, tracks[1:], is_spotify=False))

        elif 'soundcloud.com' in url:
            if '/sets/' in url:  # –ü–ª–µ–π–ª–∏—Å—Ç SoundCloud
                tracks = await get_soundcloud_playlist_urls(url)
                if not tracks:
                    await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ SoundCloud.")
                    return
                audio_url, title = await get_soundcloud_url(tracks[0][0])
                if not audio_url:
                    await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞ SoundCloud.")
                    return
                queues[interaction.guild.id].append((audio_url, title))
                current_track[interaction.guild.id] = title
                current_track_url[interaction.guild.id] = audio_url
                await interaction.followup.send(f"–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud —Å {len(tracks)} —Ç—Ä–µ–∫–∞–º–∏. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                if len(tracks) > 1:
                    asyncio.create_task(process_playlist(interaction, tracks[1:], is_spotify=False, is_soundcloud=True))
            else:  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫ SoundCloud
                audio_url, title = await get_soundcloud_url(url)
                if not audio_url:
                    await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ SoundCloud.")
                    return
                queues[interaction.guild.id].append((audio_url, title))
                current_track[interaction.guild.id] = title
                current_track_url[interaction.guild.id] = audio_url

        else:
            audio_url, title = await get_youtube_url(url)
            if not audio_url:
                await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
                return
            queues[interaction.guild.id].append((audio_url, title))
            current_track[interaction.guild.id] = title
            current_track_url[interaction.guild.id] = audio_url

        embed = discord.Embed(title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π", description=f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{current_track[interaction.guild.id]}**", color=discord.Color.blue())
        embed.set_thumbnail(url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url)
        embed.set_footer(text=f"–í –æ—á–µ—Ä–µ–¥–∏: {len(queues[interaction.guild.id])} —Ç—Ä–µ–∫–æ–≤ | –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_by[interaction.guild.id]}")

        view = MusicControls()
        message = await interaction.followup.send(embed=embed, view=view)
        control_messages[interaction.guild.id] = message

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        user_avatar = interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url
        update_task = asyncio.create_task(update_control_message(interaction.guild.id, user_avatar))
        update_tasks[interaction.guild.id] = update_task

        if not vc.is_playing():
            await play_next(interaction)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {e}")
        await interaction.followup.send(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {e}")

class MusicControls(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        user_id = interaction.user.id
        current_time = time.time()
        last_press = last_button_press.get(user_id, 0)

        if current_time - last_press < 3:
            await interaction.response.send_message("–ü–æ–¥–æ–∂–¥–∏ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º!", ephemeral=True)
            return False

        last_button_press[user_id] = current_time
        return True

    @ui.button(emoji="<:Play:1355147643600375969>", style=discord.ButtonStyle.grey)
    async def resume_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.is_paused():
            vc.resume()
            await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral=True)
        else:
            await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ.", ephemeral=True)

    @ui.button(emoji="<:Pause:1355147640836198531>", style=discord.ButtonStyle.grey)
    async def pause_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.is_playing():
            vc.pause()
            await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ.", ephemeral=True)
        else:
            await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)

    @ui.button(emoji="<:Skip:1355147642077970473>", style=discord.ButtonStyle.grey)
    async def skip_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.is_playing():
            vc.stop()
            await interaction.response.send_message("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω.", ephemeral=True)
            await play_next(interaction)
        else:
            await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.", ephemeral=True)

    @ui.button(emoji="<:restart:1355147638215016539>", style=discord.ButtonStyle.grey)
    async def restart_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.is_playing() and interaction.guild.id in current_track_url:
            vc.stop()
            audio_url = current_track_url[interaction.guild.id]
            title = current_track[interaction.guild.id]
            source = discord.FFmpegPCMAudio(audio_url, executable=FFMPEG_PATH, **FFMPEG_OPTIONS)
            source = discord.PCMVolumeTransformer(source, volume=vc.source.volume if vc.source else 1.0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            vc.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(interaction), client.loop))
            await interaction.response.send_message("–¢—Ä–µ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", ephemeral=True)

    @ui.button(emoji="‚ù§Ô∏è", style=discord.ButtonStyle.grey)
    async def link_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: <https://example.com>", ephemeral=True)

    @ui.button(emoji="<:stopbutton:1355147611375407185>", style=discord.ButtonStyle.grey)
    async def clear_button(self, interaction: discord.Interaction, button: ui.Button):
        if interaction.guild.id in queues:
            queues[interaction.guild.id].clear()
            await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞!", ephemeral=True)

    @ui.button(emoji="üèóÔ∏è", style=discord.ButtonStyle.grey)
    async def queue_button(self, interaction: discord.Interaction, button: ui.Button):
        if interaction.guild.id not in queues or not queues[interaction.guild.id]:
            await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
            return
        queue_list = "\n".join([f"{i+1}. {title}" for i, (_, title) in enumerate(queues[interaction.guild.id])])
        await interaction.response.send_message(f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{queue_list}", ephemeral=True)

    @ui.button(emoji="<:exit:1355147639603069139>", style=discord.ButtonStyle.grey)
    async def leave_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc:
            await vc.disconnect()
            if interaction.guild.id in queues:
                del queues[interaction.guild.id]
            if interaction.guild.id in current_track:
                del current_track[interaction.guild.id]
            if interaction.guild.id in current_track_url:
                del current_track_url[interaction.guild.id]
            if interaction.guild.id in added_by:
                del added_by[interaction.guild.id]
            if interaction.guild.id in control_messages:
                del control_messages[interaction.guild.id]
            if interaction.guild.id in update_tasks:
                update_tasks[interaction.guild.id].cancel()
                del update_tasks[interaction.guild.id]
            await interaction.response.send_message("–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª.", ephemeral=True)
            await interaction.message.delete()
            self.stop()
        else:
            await interaction.response.send_message("–Ø –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)

    @ui.button(emoji="üëç", style=discord.ButtonStyle.grey)
    async def volume_up_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.source:
            current_volume = vc.source.volume
            new_volume = min(current_volume + 0.1, 1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 10%, –º–∞–∫—Å–∏–º—É–º 100%
            vc.source.volume = new_volume
            await interaction.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {int(new_volume * 100)}%.", ephemeral=True)
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)

    @ui.button(emoji="üëâ", style=discord.ButtonStyle.grey)
    async def volume_down_button(self, interaction: discord.Interaction, button: ui.Button):
        vc = discord.utils.get(client.voice_clients, guild=interaction.guild)
        if vc and vc.source:
            current_volume = vc.source.volume
            new_volume = max(current_volume - 0.1, 0.0)  # –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 10%, –º–∏–Ω–∏–º—É–º 0%
            vc.source.volume = new_volume
            await interaction.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ {int(new_volume * 100)}%.", ephemeral=True)
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
tree.add_command(play)

try:
    client.run(token)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")